{"version":3,"sources":["tmdb.js","components/MovieRow.js","components/FeaturedMovie.js","components/Header.js","App.js","index.js"],"names":["API_KEY","getData","endpoint","a","fetch","req","json","getList","slug","title","items","getMovieInfo","itemId","type","info","useState","scrollX","setScrollX","className","onClick","scrollValue","Math","round","window","innerWidth","style","fontSize","listW","results","length","marginLeft","width","map","item","key","src","poster_path","alt","original_title","firstDate","Date","first_air_date","genres","i","push","name","description","overview","substring","backgroundSize","backgroundPosition","backgroundImage","backdrop_path","original_name","vote_average","getFullYear","number_of_seasons","href","id","join","black","movieList","setMovieList","featuredData","setFeatureData","blackHeader","setBlackHeader","useEffect","Tmdb","list","originals","filter","randomSelection","floor","random","selected","selectedInfo","loadAll","scrollListener","scrollY","addEventListener","removeEventListener","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e266d14a.chunk.js","sourcesContent":["const API_KEY = 'a1b2f514b71b98f4fdeabd6fae26bd24';\nconst API_BASE = 'https://api.themoviedb.org/3';\n\n/*\n- originals\n- recommended / trending\n- top 10\n- action\n- comedy\n- horror\n- romance\n- docs\n*/\n\nconst getData = async (endpoint) => {\n    const req = await fetch(`${API_BASE}${endpoint}`);\n    const json = await req.json();\n    return json;\n}\n\nexport default {\n    getList: async () => {\n        return [\n            {\n                slug: 'originals',\n                title: 'Netflix Originals',\n                items: await getData(`/discover/tv?with_network=213&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'trending',\n                title: 'Your Recommendations',\n                items: await getData(`/trending/all/week?api_key=${API_KEY}`)\n            },\n            {\n                slug: 'toprated',\n                title: 'Top Rated',\n                items: await getData(`/movie/top_rated?api_key=${API_KEY}`)\n            },\n            {\n                slug: 'action',\n                title: 'Action',\n                items: await getData(`/discover/movie?with_genres=28&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'comedy',\n                title: 'Comedy',\n                items: await getData(`/discover/movie?with_genres=35&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'horror',\n                title: 'Horror',\n                items: await getData(`/discover/movie?with_genres=27&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'romance',\n                title: 'Romance',\n                items: await getData(`/discover/movie?with_genres=10749&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'documentary',\n                title: 'Documentaries',\n                items: await getData(`/discover/movie?with_genres=99&api_key=${API_KEY}`)\n            },\n        ];\n    },\n    getMovieInfo: async (itemId, type) => {\n        let info = {};\n\n        if(itemId) {\n            switch(type) {\n                case 'movie': \n                    info = await getData(`/movie/${itemId}?api_key=${API_KEY}`);\n                break;\n\n                case 'tv':\n                    info = await getData(`/tv/${itemId}?api_key=${API_KEY}`);\n                break;\n            }\n        }\n        return info;\n        \n    }\n}","import React, { useState } from 'react';\nimport './MovieRow.css';\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\n\nexport default ({title, items}) => {\n    const [scrollX, setScrollX] = useState(0)\n    const handleLeftArrow = () => {\n        let scrollValue = scrollX + Math.round(window.innerWidth / 2);\n        if(scrollValue > 0){\n            scrollValue = 0;\n        }\n        setScrollX(scrollValue);\n    }\n    const handleRightArrow = () =>{\n        let scrollValue = scrollX - Math.round(window.innerWidth / 2);\n        let listW = items.results.length * 150;\n        if(window.innerWidth - listW > scrollValue)\n        {\n            scrollValue = (window.innerWidth - listW) - 60;\n        }\n        setScrollX(scrollValue);\n    }\n\n    return (\n        <div className=\"movieRow\">\n            <h2>{title}</h2>\n            <div className='movieRow-left' onClick={handleLeftArrow}> \n            <NavigateBeforeIcon style={{fontSize: 50}}/>\n            </div>\n            <div className='movieRow-right'  onClick={handleRightArrow}> \n            <NavigateNextIcon style={{fontSize: 50}}/>\n            </div>\n            <div className=\"movieRow-listarea\">\n                <div className=\"movieRow-list\" style={{\n                    marginLeft: scrollX,\n                    width: items.results.length * Math.round(window.innerWidth / 2)\n                }}>\n                {items.results.length > 0 && items.results.map((item, key)=>(\n               <div key={key} className=\"movieRow-item\">\n                    <img src={`https://image.tmdb.org/t/p/w300${item.poster_path}`} alt={item.original_title} />\n               </div>\n            ))}\n\n                </div>\n\n            </div>\n        </div>\n    );\n}","import React from 'react';\nimport './FeaturedMovie.css';\n\nexport default ({item}) =>{\n    let firstDate = new Date(item.first_air_date);\n\n    let genres = [];\n    for (let i in item.genres){\n        genres.push(item.genres[i].name)\n    }\n\n    let description = item.overview;\n    if(description.length > 200) {\n        description = description.substring(0, 250) + '...'\n    }\n\n    return (\n       <section className='featured' style={{\n           backgroundSize: 'cover',\n           backgroundPosition: 'center',\n           backgroundImage: `url(https://image.tmdb.org/t/p/original/${item.backdrop_path})`\n       }}>\n           <div className='featured-vertical'>\n            <div className='featured-horizontal'>\n                <div className='featured-name'>\n                {item.original_name}\n                </div>\n                <div className='featured-info'>\n                    <div className='featured-points'>{item.vote_average} points</div>\n                    <div className='featured-year'>{firstDate.getFullYear()}</div>\n                    <div className='featured-seasons'>{item.number_of_seasons} season{item.number_of_seasons !== 1 ? 's' : ''}</div>\n                </div>\n                <div className='featured-description'>{description}</div>\n                <div className='featured-buttons'>\n                <a className='featured-watchButton' href={`/watch/${item.id}`}> ► Play</a>\n                <a className='featured-myListButton' href={`/list//add/${item.id}`}> + Info</a>\n                </div>\n                <div className='featured-genres'><strong>Genres:</strong>  {genres.join(', ')}</div>\n            </div>\n           </div>\n       </section>\n    );\n}","import React from 'react';\nimport './Header.css';\n\nexport default ({black}) => {\n    return (\n        <header className={black ? 'black' : ''}>\n            <div className='header-logo'>\n            <a href='/'>\n            <img src='https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg' alt='Netflix'/>\n            </a>\n            </div>\n            <div className='header-user'>\n            <img src='https://pbs.twimg.com/media/CW2i0pJW4AEYFI3?format=png&name=360x360' alt='avatar'/>\n            </div>\n        </header>\n    )\n}","import React, { useEffect, useState} from 'react';\nimport './components/MovieRow.css'\nimport './App.css'\nimport Tmdb from './tmdb.js';\nimport MovieRow from './components/MovieRow.js'\nimport FeaturedMovie from './components/FeaturedMovie.js'\nimport Header from './components/Header.js'\n\nexport default () => {\n\n  const [movieList, setMovieList] = useState([]);\n  const [featuredData, setFeatureData] = useState(null) //initial state is null since there's no movie to be shown\n  const [blackHeader, setBlackHeader] = useState(false);\n\n  useEffect(()=>{\n    const loadAll = async () => {\n// loading movies/tv shows list\nlet list = await Tmdb.getList();\nsetMovieList(list);\n\n//getting featured movie/data (Netflix Originals)\n      let originals = list.filter(i=>i.slug === 'originals');\n      const randomSelection = Math.floor(Math.random() * (originals[0].items.results.length - 1));\n      let selected = originals[0].items.results[randomSelection];\n      let selectedInfo = await Tmdb.getMovieInfo(selected.id, 'tv');\n      setFeatureData(selectedInfo); //add data to page\n\n    }\n    loadAll();\n  }, []);\n\nuseEffect(()=>{\n  const scrollListener = () =>{\n    if(window.scrollY > 10) {\n      setBlackHeader(true);\n    } else {\n      setBlackHeader(false);\n    }\n  }\n  window.addEventListener('scroll', scrollListener);\n\n  return ()=>{\n    window.removeEventListener('scroll', scrollListener);\n  }\n}, []);\n\n\n  return (\n    <div className=\"page\">\n \n <Header black={blackHeader}/>\n\n {featuredData &&\n     <FeaturedMovie item={featuredData} />\n }\n\n\n     <section className=\"lists\">\n    {movieList.map((item, key)=>(\n      <div>\n       <MovieRow key={key} title={item.title} items={item.items} />\n      </div>\n    ))}\n     </section>\n\n     <footer>\n       Created using TheMovieDB.org API. <br/>\n       Image rights belongs to Netflix.\n     </footer>\n\n      {movieList <= 0 &&\n     <div className='loading'>\n       <img src='https://cdn.lowgif.com/small/0534e2a412eeb281-the-counterintuitive-tech-behind-netflix-s-worldwide.gif\"' alt='loading'/>\n\n     </div>\n      }\n\n    </div>\n  );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}