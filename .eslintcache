[{"/Users/alessandro/Documents/Projects/netflixclone/src/index.js":"1","/Users/alessandro/Documents/Projects/netflixclone/src/App.js":"2","/Users/alessandro/Documents/Projects/netflixclone/src/tmdb.js":"3","/Users/alessandro/Documents/Projects/netflixclone/src/components/MovieRow.js":"4","/Users/alessandro/Documents/Projects/netflixclone/src/components/featuredMovie.js":"5","/Users/alessandro/Documents/Projects/netflixclone/src/components/FeaturedMovie.js":"6","/Users/alessandro/Documents/Projects/netflixclone/src/components/Header.js":"7"},{"size":196,"mtime":1611881826604,"results":"8","hashOfConfig":"9"},{"size":1860,"mtime":1619705053005,"results":"10","hashOfConfig":"9"},{"size":2364,"mtime":1619659688363,"results":"11","hashOfConfig":"9"},{"size":1797,"mtime":1619716338277,"results":"12","hashOfConfig":"9"},{"size":1555,"mtime":1619663336343,"results":"13","hashOfConfig":"9"},{"size":1555,"mtime":1619663336343,"results":"14","hashOfConfig":"9"},{"size":552,"mtime":1619704431411,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1oi00jf",{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"18"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"18"},"/Users/alessandro/Documents/Projects/netflixclone/src/index.js",[],["35","36"],"/Users/alessandro/Documents/Projects/netflixclone/src/App.js",["37"],"import React, { useEffect, useState} from 'react';\nimport './components/MovieRow.css'\nimport './App.css'\nimport Tmdb from './tmdb.js';\nimport MovieRow from './components/MovieRow.js'\nimport FeaturedMovie from './components/FeaturedMovie.js'\nimport Header from './components/Header.js'\n\nexport default () => {\n\n  const [movieList, setMovieList] = useState([]);\n  const [featuredData, setFeatureData] = useState(null) //initial state is null since there's no movie to be shown\n  const [blackHeader, setBlackHeader] = useState(false);\n\n  useEffect(()=>{\n    const loadAll = async () => {\n// loading movies/tv shows list\nlet list = await Tmdb.getList();\nsetMovieList(list);\n\n//getting featured movie/data (Netflix Originals)\n      let originals = list.filter(i=>i.slug === 'originals');\n      const randomSelection = Math.floor(Math.random() * (originals[0].items.results.length - 1));\n      let selected = originals[0].items.results[randomSelection];\n      let selectedInfo = await Tmdb.getMovieInfo(selected.id, 'tv');\n      setFeatureData(selectedInfo); //add data to page\n\n    }\n    loadAll();\n  }, []);\n\nuseEffect(()=>{\n  const scrollListener = () =>{\n    if(window.scrollY > 10) {\n      setBlackHeader(true);\n    } else {\n      setBlackHeader(false);\n    }\n  }\n  window.addEventListener('scroll', scrollListener);\n\n  return ()=>{\n    window.removeEventListener('scroll', scrollListener);\n  }\n}, []);\n\n\n  return (\n    <div className=\"page\">\n \n <Header black={blackHeader}/>\n\n {featuredData &&\n     <FeaturedMovie item={featuredData} />\n }\n\n\n     <section className=\"lists\">\n    {movieList.map((item, key)=>(\n      <div>\n       <MovieRow key={key} title={item.title} items={item.items} />\n      </div>\n    ))}\n     </section>\n\n     <footer>\n       Created using TheMovieDB.org API. <br/>\n       Image rights belongs to Netflix.\n     </footer>\n    </div>\n  );\n}","/Users/alessandro/Documents/Projects/netflixclone/src/tmdb.js",["38","39"],"const API_KEY = 'a1b2f514b71b98f4fdeabd6fae26bd24';\nconst API_BASE = 'https://api.themoviedb.org/3';\n\n/*\n- originals\n- recommended / trending\n- top 10\n- action\n- comedy\n- horror\n- romance\n- docs\n*/\n\nconst getData = async (endpoint) => {\n    const req = await fetch(`${API_BASE}${endpoint}`);\n    const json = await req.json();\n    return json;\n}\n\nexport default {\n    getList: async () => {\n        return [\n            {\n                slug: 'originals',\n                title: 'Netflix Originals',\n                items: await getData(`/discover/tv?with_network=213&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'trending',\n                title: 'Your Recommendations',\n                items: await getData(`/trending/all/week?api_key=${API_KEY}`)\n            },\n            {\n                slug: 'toprated',\n                title: 'Top Rated',\n                items: await getData(`/movie/top_rated?api_key=${API_KEY}`)\n            },\n            {\n                slug: 'action',\n                title: 'Action',\n                items: await getData(`/discover/movie?with_genres=28&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'comedy',\n                title: 'Comedy',\n                items: await getData(`/discover/movie?with_genres=35&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'horror',\n                title: 'Horror',\n                items: await getData(`/discover/movie?with_genres=27&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'romance',\n                title: 'Romance',\n                items: await getData(`/discover/movie?with_genres=10749&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'documentary',\n                title: 'Documentaries',\n                items: await getData(`/discover/movie?with_genres=99&api_key=${API_KEY}`)\n            },\n        ];\n    },\n    getMovieInfo: async (itemId, type) => {\n        let info = {};\n\n        if(itemId) {\n            switch(type) {\n                case 'movie': \n                    info = await getData(`/movie/${itemId}?api_key=${API_KEY}`);\n                break;\n\n                case 'tv':\n                    info = await getData(`/tv/${itemId}?api_key=${API_KEY}`);\n                break;\n            }\n        }\n        return info;\n        \n    }\n}","/Users/alessandro/Documents/Projects/netflixclone/src/components/MovieRow.js",["40"],"/Users/alessandro/Documents/Projects/netflixclone/src/components/featuredMovie.js",["41"],"/Users/alessandro/Documents/Projects/netflixclone/src/components/FeaturedMovie.js",["42"],"import React from 'react';\nimport './FeaturedMovie.css';\n\nexport default ({item}) =>{\n    let firstDate = new Date(item.first_air_date);\n\n    let genres = [];\n    for (let i in item.genres){\n        genres.push(item.genres[i].name)\n    }\n\n    return (\n       <section className='featured' style={{\n           backgroundSize: 'cover',\n           backgroundPosition: 'center',\n           backgroundImage: `url(https://image.tmdb.org/t/p/original/${item.backdrop_path})`\n       }}>\n           <div className='featured-vertical'>\n            <div className='featured-horizontal'>\n                <div className='featured-name'>\n                {item.original_name}\n                </div>\n                <div className='featured-info'>\n                    <div className='featured-points'>{item.vote_average} points</div>\n                    <div className='featured-year'>{firstDate.getFullYear()}</div>\n                    <div className='featured-seasons'>{item.number_of_seasons} season{item.number_of_seasons !== 1 ? 's' : ''}</div>\n                </div>\n                <div className='featured-description'>{item.overview}</div>\n                <div className='featured-buttons'>\n                <a className='featured-watchButton' href={`/watch/${item.id}`}>Play</a>\n                <a className='featured-myListButton' href={`/list//add/${item.id}`}> + Info</a>\n                </div>\n                <div className='featured-genres'><strong>Genres:</strong>  {genres.join(', ')}</div>\n            </div>\n           </div>\n       </section>\n    );\n}","/Users/alessandro/Documents/Projects/netflixclone/src/components/Header.js",["43"],"import React from 'react';\nimport './Header.css';\n\nexport default ({black}) => {\n    return (\n        <header className={black ? 'black' : ''}>\n            <div className='header-logo'>\n            <a href='/'>\n            <img src='https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg' alt='Netflix'/>\n            </a>\n            </div>\n            <div className='header-user'>\n            <img src='https://pbs.twimg.com/media/CW2i0pJW4AEYFI3?format=png&name=360x360' alt='avatar'/>\n            </div>\n        </header>\n    )\n}",{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":9,"column":1,"nodeType":"50","endLine":72,"endColumn":2},{"ruleId":"48","severity":1,"message":"51","line":21,"column":1,"nodeType":"50","endLine":83,"endColumn":2},{"ruleId":"52","severity":1,"message":"53","line":70,"column":13,"nodeType":"54","messageId":"55","endLine":78,"endColumn":14},{"ruleId":"48","severity":1,"message":"49","line":6,"column":1,"nodeType":"50","endLine":50,"endColumn":2},{"ruleId":"48","severity":1,"message":"49","line":4,"column":1,"nodeType":"50","endLine":12,"endColumn":2},{"ruleId":"48","severity":1,"message":"49","line":4,"column":1,"nodeType":"50","endLine":38,"endColumn":2},{"ruleId":"48","severity":1,"message":"49","line":4,"column":1,"nodeType":"50","endLine":17,"endColumn":2},"no-native-reassign",["56"],"no-negated-in-lhs",["57"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","Assign object to a variable before exporting as module default","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-global-assign","no-unsafe-negation"]